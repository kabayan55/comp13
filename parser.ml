type token =
  | LPAREN
  | RPAREN
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | MOD
  | PLUSDOT
  | MINUSDOT
  | TIMESDOT
  | DIVIDEDOT
  | LET
  | REC
  | IN
  | IF
  | THEN
  | ELSE
  | EQUAL
  | UNEQUAL
  | EQUALORLESSTHAN
  | EQUALORMORETHAN
  | LESSTHAN
  | MORETHAN
  | DOT
  | INTEGER of (int)
  | FLOAT of (float)
  | VARIABLE of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
(* 補助的な変数、関数、型などの定義 *)
  open Syntax

# 38 "parser.ml"
let yytransl_const = [|
  257 (* LPAREN *);
  258 (* RPAREN *);
  259 (* PLUS *);
  260 (* MINUS *);
  261 (* TIMES *);
  262 (* DIVIDE *);
  263 (* MOD *);
  264 (* PLUSDOT *);
  265 (* MINUSDOT *);
  266 (* TIMESDOT *);
  267 (* DIVIDEDOT *);
  268 (* LET *);
  269 (* REC *);
  270 (* IN *);
  271 (* IF *);
  272 (* THEN *);
  273 (* ELSE *);
  274 (* EQUAL *);
  275 (* UNEQUAL *);
  276 (* EQUALORLESSTHAN *);
  277 (* EQUALORMORETHAN *);
  278 (* LESSTHAN *);
  279 (* MORETHAN *);
  280 (* DOT *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  281 (* INTEGER *);
  282 (* FLOAT *);
  283 (* VARIABLE *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\003\000\003\000\004\000\004\000\000\000"

let yylen = "\002\000\
\001\000\001\000\001\000\003\000\001\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\008\000\008\000\
\008\000\008\000\008\000\008\000\006\000\008\000\002\000\002\000\
\002\000\001\000\002\000\001\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\
\002\000\003\000\000\000\000\000\000\000\025\000\024\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\023\000\004\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\010\000\000\000\000\000\000\000\000\000\029\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\027\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\011\000\012\000\050\000\029\000"

let yysindex = "\005\000\
\255\254\000\000\255\254\255\254\255\254\000\255\255\254\000\000\
\000\000\000\000\080\001\003\255\058\001\000\000\000\000\236\254\
\246\254\094\255\255\254\255\254\255\254\255\254\255\254\255\254\
\255\254\255\254\255\254\003\255\000\000\000\000\238\254\255\254\
\255\254\255\254\255\254\255\254\255\254\255\254\059\255\059\255\
\005\255\005\255\000\000\059\255\059\255\005\255\005\255\000\000\
\238\254\248\254\243\255\220\255\020\001\100\001\114\001\128\001\
\142\001\000\000\255\254\255\254\255\254\255\254\255\254\255\254\
\255\254\255\254\036\001\080\001\051\255\115\255\131\255\153\255\
\175\255\197\255\255\254\255\254\255\254\255\254\255\254\255\254\
\255\254\080\001\080\001\080\001\080\001\080\001\080\001\080\001"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\016\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\023\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\133\000\155\000\
\045\000\067\000\000\000\177\000\199\000\089\000\111\000\000\000\
\253\254\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\209\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\222\000\232\000\245\000\255\000\035\001\057\001\079\001"

let yygindex = "\000\000\
\015\000\249\255\224\255\003\000"

let yytablesize = 670
let yytable = "\003\000\
\005\000\004\000\005\000\003\000\028\000\001\000\031\000\032\000\
\049\000\059\000\006\000\023\000\016\000\007\000\026\000\030\000\
\058\000\013\000\014\000\015\000\028\000\018\000\028\000\008\000\
\009\000\010\000\017\000\008\000\009\000\010\000\048\000\000\000\
\000\000\039\000\040\000\041\000\042\000\043\000\044\000\045\000\
\046\000\047\000\000\000\000\000\008\000\000\000\051\000\052\000\
\053\000\054\000\055\000\056\000\057\000\019\000\020\000\021\000\
\022\000\023\000\024\000\025\000\026\000\027\000\000\000\021\000\
\022\000\023\000\009\000\076\000\026\000\027\000\000\000\000\000\
\000\000\067\000\068\000\069\000\070\000\071\000\072\000\073\000\
\074\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\013\000\082\000\083\000\084\000\085\000\086\000\087\000\088\000\
\019\000\020\000\021\000\022\000\023\000\024\000\025\000\026\000\
\027\000\000\000\000\000\000\000\000\000\000\000\014\000\033\000\
\034\000\035\000\036\000\037\000\038\000\019\000\020\000\021\000\
\022\000\023\000\024\000\025\000\026\000\027\000\000\000\000\000\
\000\000\000\000\000\000\077\000\006\000\019\000\020\000\021\000\
\022\000\023\000\024\000\025\000\026\000\027\000\000\000\000\000\
\000\000\000\000\000\000\078\000\000\000\000\000\000\000\000\000\
\000\000\000\000\007\000\019\000\020\000\021\000\022\000\023\000\
\024\000\025\000\026\000\027\000\000\000\000\000\000\000\000\000\
\000\000\079\000\000\000\000\000\000\000\000\000\000\000\000\000\
\011\000\019\000\020\000\021\000\022\000\023\000\024\000\025\000\
\026\000\027\000\000\000\000\000\000\000\000\000\000\000\080\000\
\000\000\000\000\000\000\000\000\000\000\000\000\012\000\019\000\
\020\000\021\000\022\000\023\000\024\000\025\000\026\000\027\000\
\021\000\000\000\000\000\000\000\000\000\081\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\022\000\019\000\020\000\
\021\000\022\000\023\000\024\000\025\000\026\000\027\000\015\000\
\000\000\000\000\000\000\061\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\016\000\019\000\020\000\021\000\
\022\000\023\000\024\000\025\000\026\000\027\000\017\000\000\000\
\060\000\000\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\000\000\000\000\005\000\000\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\028\000\018\000\000\000\028\000\000\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\008\000\008\000\
\008\000\008\000\008\000\000\000\008\000\008\000\008\000\008\000\
\019\000\000\000\008\000\000\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\009\000\009\000\009\000\009\000\
\009\000\000\000\009\000\009\000\009\000\009\000\020\000\000\000\
\009\000\000\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\013\000\013\000\013\000\013\000\013\000\000\000\
\013\000\013\000\013\000\013\000\000\000\000\000\013\000\000\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\014\000\014\000\014\000\014\000\014\000\000\000\014\000\014\000\
\014\000\014\000\000\000\000\000\014\000\000\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\006\000\006\000\
\006\000\000\000\000\000\000\000\006\000\006\000\000\000\000\000\
\000\000\000\000\006\000\000\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\007\000\007\000\007\000\000\000\
\000\000\000\000\007\000\007\000\000\000\000\000\000\000\000\000\
\007\000\000\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\011\000\011\000\011\000\000\000\000\000\000\000\
\011\000\011\000\000\000\000\000\000\000\000\000\011\000\000\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\012\000\012\000\012\000\000\000\000\000\000\000\012\000\012\000\
\000\000\000\000\021\000\000\000\012\000\000\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\021\000\022\000\
\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
\000\000\015\000\000\000\022\000\000\000\022\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\015\000\016\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\000\000\
\017\000\000\000\016\000\000\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\017\000\000\000\017\000\017\000\
\017\000\017\000\017\000\017\000\017\000\017\000\019\000\020\000\
\021\000\022\000\023\000\024\000\025\000\026\000\027\000\000\000\
\000\000\000\000\000\000\062\000\018\000\000\000\019\000\020\000\
\021\000\022\000\023\000\024\000\025\000\026\000\027\000\000\000\
\018\000\075\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\019\000\030\000\019\000\020\000\021\000\022\000\
\023\000\024\000\025\000\026\000\027\000\000\000\019\000\000\000\
\019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
\020\000\000\000\019\000\020\000\021\000\022\000\023\000\024\000\
\025\000\026\000\027\000\000\000\020\000\000\000\020\000\020\000\
\020\000\020\000\020\000\020\000\020\000\020\000\019\000\020\000\
\021\000\022\000\023\000\024\000\025\000\026\000\027\000\000\000\
\000\000\000\000\000\000\063\000\019\000\020\000\021\000\022\000\
\023\000\024\000\025\000\026\000\027\000\000\000\000\000\000\000\
\000\000\064\000\019\000\020\000\021\000\022\000\023\000\024\000\
\025\000\026\000\027\000\000\000\000\000\000\000\000\000\065\000\
\019\000\020\000\021\000\022\000\023\000\024\000\025\000\026\000\
\027\000\000\000\000\000\000\000\000\000\066\000"

let yycheck = "\001\001\
\000\000\003\001\004\001\001\001\012\000\001\000\027\001\018\001\
\027\001\018\001\012\001\007\001\013\001\015\001\018\001\000\000\
\049\000\003\000\004\000\005\000\028\000\007\000\000\000\025\001\
\026\001\027\001\027\001\025\001\026\001\027\001\028\000\255\255\
\255\255\019\000\020\000\021\000\022\000\023\000\024\000\025\000\
\026\000\027\000\255\255\255\255\000\000\255\255\032\000\033\000\
\034\000\035\000\036\000\037\000\038\000\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\255\255\005\001\
\006\001\007\001\000\000\017\001\010\001\011\001\255\255\255\255\
\255\255\059\000\060\000\061\000\062\000\063\000\064\000\065\000\
\066\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\075\000\076\000\077\000\078\000\079\000\080\000\081\000\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\255\255\255\255\255\255\255\255\255\255\000\000\018\001\
\019\001\020\001\021\001\022\001\023\001\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\255\255\255\255\
\255\255\255\255\255\255\017\001\000\000\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\255\255\255\255\
\255\255\255\255\255\255\017\001\255\255\255\255\255\255\255\255\
\255\255\255\255\000\000\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\255\255\255\255\255\255\255\255\
\255\255\017\001\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\255\255\255\255\255\255\255\255\255\255\017\001\
\255\255\255\255\255\255\255\255\255\255\255\255\000\000\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\000\000\255\255\255\255\255\255\255\255\017\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\000\000\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\000\000\
\255\255\255\255\255\255\016\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\000\000\255\255\
\014\001\255\255\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\255\255\255\255\014\001\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\002\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\000\000\255\255\014\001\255\255\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\002\001\003\001\
\004\001\005\001\006\001\255\255\008\001\009\001\010\001\011\001\
\000\000\255\255\014\001\255\255\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\002\001\003\001\004\001\005\001\
\006\001\255\255\008\001\009\001\010\001\011\001\000\000\255\255\
\014\001\255\255\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\002\001\003\001\004\001\005\001\006\001\255\255\
\008\001\009\001\010\001\011\001\255\255\255\255\014\001\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\002\001\003\001\004\001\005\001\006\001\255\255\008\001\009\001\
\010\001\011\001\255\255\255\255\014\001\255\255\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\002\001\003\001\
\004\001\255\255\255\255\255\255\008\001\009\001\255\255\255\255\
\255\255\255\255\014\001\255\255\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\002\001\003\001\004\001\255\255\
\255\255\255\255\008\001\009\001\255\255\255\255\255\255\255\255\
\014\001\255\255\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\002\001\003\001\004\001\255\255\255\255\255\255\
\008\001\009\001\255\255\255\255\255\255\255\255\014\001\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\002\001\003\001\004\001\255\255\255\255\255\255\008\001\009\001\
\255\255\255\255\002\001\255\255\014\001\255\255\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\014\001\002\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\255\255\002\001\255\255\014\001\255\255\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\014\001\002\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\255\255\
\002\001\255\255\014\001\255\255\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\014\001\255\255\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\255\255\
\255\255\255\255\255\255\016\001\002\001\255\255\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\255\255\
\014\001\014\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\002\001\002\001\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\255\255\014\001\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\002\001\255\255\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\255\255\014\001\255\255\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\255\255\
\255\255\255\255\255\255\016\001\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\255\255\255\255\255\255\
\255\255\016\001\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\255\255\255\255\255\255\255\255\016\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\255\255\255\255\255\255\255\255\016\001"

let yynames_const = "\
  LPAREN\000\
  RPAREN\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  MOD\000\
  PLUSDOT\000\
  MINUSDOT\000\
  TIMESDOT\000\
  DIVIDEDOT\000\
  LET\000\
  REC\000\
  IN\000\
  IF\000\
  THEN\000\
  ELSE\000\
  EQUAL\000\
  UNEQUAL\000\
  EQUALORLESSTHAN\000\
  EQUALORMORETHAN\000\
  LESSTHAN\000\
  MORETHAN\000\
  DOT\000\
  EOF\000\
  "

let yynames_block = "\
  INTEGER\000\
  FLOAT\000\
  VARIABLE\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 67 "parser.mly"
   ( Syntax.Number (_1) )
# 344 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 69 "parser.mly"
   ( Syntax.Real (_1) )
# 351 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 71 "parser.mly"
   ( Syntax.Variable (_1) )
# 358 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 73 "parser.mly"
 ( _2 )
# 365 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 78 "parser.mly"
 ( _1 )
# 372 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 82 "parser.mly"
 ( Syntax.Op (_1, Operator.Plus, _3) )
# 380 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 84 "parser.mly"
 ( Syntax.Op (_1, Operator.Minus, _3) )
# 388 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 86 "parser.mly"
 ( Syntax.Op (_1, Operator.Times, _3) )
# 396 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 88 "parser.mly"
 ( Syntax.Op (_1, Operator.Divide, _3) )
# 404 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 90 "parser.mly"
 ( Syntax.Op (_1, Operator.Mod, _3) )
# 412 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 94 "parser.mly"
 ( Syntax.Op (_1, Operator.PlusDot, _3) )
# 420 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 96 "parser.mly"
 ( Syntax.Op (_1, Operator.MinusDot, _3) )
# 428 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 98 "parser.mly"
 ( Syntax.Op (_1, Operator.TimesDot, _3) )
# 436 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 100 "parser.mly"
 ( Syntax.Op (_1, Operator.DivideDot, _3) )
# 444 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Syntax.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 104 "parser.mly"
        ( Syntax.IfEqual(_2, _4, _6, _8) )
# 454 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Syntax.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 106 "parser.mly"
        ( Syntax.IfEqual(_2, _4, _8, _6) )
# 464 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Syntax.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 108 "parser.mly"
        ( Syntax.IfLess(_4, _2, _8, _6) )
# 474 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Syntax.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 110 "parser.mly"
        ( Syntax.IfLess(_2, _4, _8, _6) )
# 484 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Syntax.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 112 "parser.mly"
        ( Syntax.IfLess(_2, _4, _6, _8) )
# 494 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Syntax.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 114 "parser.mly"
        ( Syntax.IfLess(_4, _2, _6, _8) )
# 504 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 118 "parser.mly"
    ( Syntax.Let( (_2,Type.gen_type()), _4, _6) )
# 513 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'variable_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 121 "parser.mly"
    ( Syntax.LetRec((_3,Type.gen_type()), _4, _6, _8) )
# 523 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exper_list) in
    Obj.repr(
# 124 "parser.mly"
    (Syntax.Application(_1, _2))
# 531 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 126 "parser.mly"
      (Syntax.Op(Syntax.Number (0), Operator.Minus, _2))
# 538 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 128 "parser.mly"
      (Syntax.Op(Syntax.Number (0), Operator.Plus, _2))
# 545 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 134 "parser.mly"
    ( [(_1,Type.gen_type())])
# 552 "parser.ml"
               : 'variable_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'variable_list) in
    Obj.repr(
# 136 "parser.mly"
    ( (_1,Type.gen_type())::_2)
# 560 "parser.ml"
               : 'variable_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 144 "parser.mly"
    ( [_1] )
# 567 "parser.ml"
               : 'exper_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exper_list) in
    Obj.repr(
# 146 "parser.mly"
    ( _1::_2 )
# 575 "parser.ml"
               : 'exper_list))
(* Entry expr *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let expr (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.t)
